[{"/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/index.js":"1","/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/reportWebVitals.js":"2","/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/App.js":"3","/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/reducers/index.js":"4","/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/reducers/postReducer.js":"5","/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/actions/postActions.js":"6","/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/pages/DashboardPage.js":"7","/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/pages/PostsPage.js":"8","/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/components/Post.js":"9"},{"size":1186,"mtime":1612319412000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1612314987000,"results":"12","hashOfConfig":"11"},{"size":452,"mtime":1612404587000,"results":"13","hashOfConfig":"11"},{"size":176,"mtime":1612317154000,"results":"14","hashOfConfig":"11"},{"size":544,"mtime":1612404451000,"results":"15","hashOfConfig":"11"},{"size":1700,"mtime":1612405899000,"results":"16","hashOfConfig":"11"},{"size":286,"mtime":1612404309000,"results":"17","hashOfConfig":"11"},{"size":947,"mtime":1612405032000,"results":"18","hashOfConfig":"11"},{"size":157,"mtime":1612406196000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"12019mt",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/index.js",[],["41","42"],"/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/reportWebVitals.js",[],"/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/App.js",[],"/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/reducers/index.js",[],"/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/reducers/postReducer.js",[],"/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/actions/postActions.js",["43"],"import postsReducer from \"../reducers/postsReducer\";\n// Create Redux action types\nexport const GET_POSTS = \"GET_POSTS\";\n//getPosts telling Redux that we are going to fetch posts from an API\nexport const GET_POSTS_SUCCESS = \"GET_POSTS_SUCCESS\";\n//getPostsSuccess passing the posts to Redux on a successful API call\nexport const GET_POSTS_FAILURE = \"GET_POSTS_FAILURE\";\n//getPostsFailure informing redux that an error was encountered\n// during Redux on failed API call\n// create action creators, which are functions that return an action\n// which consists of the type and an optional payload loading data\nexport const getPosts = () => ({\n  type: GET_POSTS,\n});\nexport const getPostsSuccess = (posts) => ({\n  type: GET_POSTS_SUCCESS,\n  payload: posts,\n});\nexport const getPostsFailure = () => ({\n  type: GET_POSTS_FAILURE,\n});\n// Finally, make the asynchronous thunk action that combines all three of the above actions.\n// When called, it will dispatch the initial getPosts()\n// action to inform Redux to prepare for an API call, then in a try/catch, do everything necessary to get the data,\n// and dispatch a success or failure action as necessary.\nexport function fetchPosts() {\n  return async (dispatch) => {\n    dispatch(getPosts());\n    // dispatch is a method available in the store object that\n    //accepts an object which is used to update the Redux State.\n    // Usually this object is the result of invoking an\n    // action creator\n    try {\n      const response = await fetch(\n        \"https://jsonplaceholder.typicode.com/posts\"\n      );\n      const data = await response.json();\n      dispatch(getPostsSuccess(data));\n    } catch (error) {\n      dispatch(getPostsFailure());\n    }\n  };\n}\n","/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/pages/DashboardPage.js",["44"],"import { Link } from \"react-router-dom\";\nconst DashboardPage = () => {\n  return (\n    <section>\n      <h1>Dashboard</h1>\n      <p>This is the dashboard</p>\n      <Link to=\"/posts\" className=\"button\">\n        View Posts\n      </Link>\n    </section>\n  );\n};\nexport default DashboardPage;\n","/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/pages/PostsPage.js",[],"/Users/tkhstudent25/Desktop/Web_Dev/Week 20/redux-lesson/src/components/Post.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":1,"column":8,"nodeType":"51","messageId":"52","endLine":1,"endColumn":20},{"ruleId":"49","severity":1,"message":"53","line":3,"column":7,"nodeType":"51","messageId":"52","endLine":3,"endColumn":20},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'postsReducer' is defined but never used.","Identifier","unusedVar","'DashboardPage' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]